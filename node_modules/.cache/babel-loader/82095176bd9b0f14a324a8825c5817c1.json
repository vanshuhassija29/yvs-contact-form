{"ast":null,"code":"import _classCallCheck from \"/Users/vanshu/Sites/projects/yvs-contact-form/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/vanshu/Sites/projects/yvs-contact-form/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/vanshu/Sites/projects/yvs-contact-form/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/vanshu/Sites/projects/yvs-contact-form/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/vanshu/Sites/projects/yvs-contact-form/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/vanshu/Sites/projects/yvs-contact-form/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/vanshu/Sites/projects/yvs-contact-form/src/components/Form.js\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"antd/dist/antd.css\";\nimport \"../index.css\";\nimport { Form, Input, Tooltip, Icon, Cascader, Select, Row, Col, Checkbox, Button, AutoComplete, Card } from \"antd\";\nvar Option = Select.Option;\nvar AutoCompleteOption = AutoComplete.Option;\n\nvar RegistrationForm =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(RegistrationForm, _React$Component);\n\n  function RegistrationForm() {\n    var _this;\n\n    _classCallCheck(this, RegistrationForm);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(RegistrationForm).call(this));\n\n    _this.handleSubmit = function (e) {\n      var API_PATH = \"http://targeted.local.geekydev.com/index.php\";\n      e.preventDefault();\n\n      _this.props.form.validateFieldsAndScroll(function (err, values) {\n        if (!err) {\n          console.log(\"Values are \", values);\n\n          _this.setState({\n            name: values.name,\n            phone: values.phone,\n            email: values.email,\n            password: values.password\n          }, function () {\n            console.log(\"Done with state and state is \", _this.state);\n            fetch(API_PATH, {\n              method: \"POST\",\n              headers: {\n                Accept: \"application/json\",\n                \"Content-Type\": \"application/json\"\n              },\n              mode: \"no-cors\",\n              body: JSON.stringify({\n                name: _this.state.name,\n                password: _this.state.password,\n                email: _this.state.email,\n                phone: _this.state.phone\n              })\n            }).then(function (result) {\n              console.log(result);\n            }).catch(function (error) {\n              return console.log(error);\n            });\n          });\n        }\n      });\n    };\n\n    _this.handleConfirmBlur = function (e) {\n      var value = e.target.value;\n\n      _this.setState({\n        confirmDirty: _this.state.confirmDirty || !!value\n      });\n    };\n\n    _this.compareToFirstPassword = function (rule, value, callback) {\n      var form = _this.props.form;\n\n      if (value && value !== form.getFieldValue(\"password\")) {\n        callback(\"Two passwords that you enter is inconsistent!\");\n      } else {\n        callback();\n      }\n    };\n\n    _this.validateToNextPassword = function (rule, value, callback) {\n      var form = _this.props.form;\n\n      if (value && _this.state.confirmDirty) {\n        form.validateFields([\"confirm\"], {\n          force: true\n        });\n      }\n\n      callback();\n    };\n\n    _this.handleWebsiteChange = function (value) {\n      var autoCompleteResult;\n\n      if (!value) {\n        autoCompleteResult = [];\n      } else {\n        autoCompleteResult = [\".com\", \".org\", \".net\"].map(function (domain) {\n          return \"\".concat(value).concat(domain);\n        });\n      }\n\n      _this.setState({\n        autoCompleteResult: autoCompleteResult\n      });\n    };\n\n    _this.state = {\n      confirmDirty: false,\n      autoCompleteResult: [],\n      name: \"\",\n      email: \"\",\n      phone: \"\",\n      password: \"\"\n    };\n    _this.handleSubmit = _this.handleSubmit.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(RegistrationForm, [{\n    key: \"render\",\n    value: function render() {\n      var getFieldDecorator = this.props.form.getFieldDecorator;\n      var autoCompleteResult = this.state.autoCompleteResult;\n      var formItemLayout = {\n        labelCol: {\n          xs: {\n            span: 24\n          },\n          sm: {\n            span: 8\n          }\n        },\n        wrapperCol: {\n          xs: {\n            span: 24\n          },\n          sm: {\n            span: 16\n          }\n        }\n      };\n      var tailFormItemLayout = {\n        wrapperCol: {\n          xs: {\n            span: 24,\n            offset: 0\n          },\n          sm: {\n            span: 16,\n            offset: 8\n          }\n        }\n      };\n      var prefixSelector = getFieldDecorator(\"prefix\", {\n        initialValue: \"91\"\n      })(React.createElement(Select, {\n        style: {\n          width: 70\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140\n        },\n        __self: this\n      }, React.createElement(Option, {\n        value: \"91\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141\n        },\n        __self: this\n      }, \"+91\")));\n      return React.createElement(Card, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"observe\",\n        style: {\n          marginRight: \"100px\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147\n        },\n        __self: this\n      }, React.createElement(Form, Object.assign({}, formItemLayout, {\n        onSubmit: this.handleSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148\n        },\n        __self: this\n      }), React.createElement(Form.Item, {\n        label: \"Name\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149\n        },\n        __self: this\n      }, getFieldDecorator(\"name\", {\n        rules: [{\n          required: true,\n          message: \"Please tell us your name!\"\n        }]\n      })(React.createElement(Input, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157\n        },\n        __self: this\n      }))), React.createElement(Form.Item, {\n        label: \"E-mail\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159\n        },\n        __self: this\n      }, getFieldDecorator(\"email\", {\n        rules: [{\n          type: \"email\",\n          message: \"The input is not valid E-mail!\"\n        }, {\n          required: true,\n          message: \"Please input your E-mail!\"\n        }]\n      })(React.createElement(Input, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171\n        },\n        __self: this\n      }))), React.createElement(Form.Item, {\n        label: \"Password\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173\n        },\n        __self: this\n      }, getFieldDecorator(\"password\", {\n        rules: [{\n          required: true,\n          message: \"Please input your password!\"\n        }, {\n          validator: this.validateToNextPassword\n        }]\n      })(React.createElement(Input, {\n        type: \"password\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184\n        },\n        __self: this\n      }))), React.createElement(Form.Item, {\n        label: \"Confirm Password\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 186\n        },\n        __self: this\n      }, getFieldDecorator(\"confirm\", {\n        rules: [{\n          required: true,\n          message: \"Please confirm your password!\"\n        }, {\n          validator: this.compareToFirstPassword\n        }]\n      })(React.createElement(Input, {\n        type: \"password\",\n        onBlur: this.handleConfirmBlur,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 197\n        },\n        __self: this\n      }))), React.createElement(Form.Item, {\n        label: \"Phone Number\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200\n        },\n        __self: this\n      }, getFieldDecorator(\"phone\", {\n        rules: [{\n          required: true,\n          message: \"Please input your phone number!\"\n        }]\n      })(React.createElement(Input, {\n        addonBefore: prefixSelector,\n        style: {\n          width: \"100%\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 209\n        },\n        __self: this\n      }))), React.createElement(Form.Item, Object.assign({}, tailFormItemLayout, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 212\n        },\n        __self: this\n      }), React.createElement(Button, {\n        type: \"primary\",\n        htmlType: \"submit\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 213\n        },\n        __self: this\n      }, \"Register\")))));\n    }\n  }]);\n\n  return RegistrationForm;\n}(React.Component);\n\nexport default Form.create()(RegistrationForm);","map":{"version":3,"sources":["/Users/vanshu/Sites/projects/yvs-contact-form/src/components/Form.js"],"names":["React","ReactDOM","Form","Input","Tooltip","Icon","Cascader","Select","Row","Col","Checkbox","Button","AutoComplete","Card","Option","AutoCompleteOption","RegistrationForm","handleSubmit","e","API_PATH","preventDefault","props","form","validateFieldsAndScroll","err","values","console","log","setState","name","phone","email","password","state","fetch","method","headers","Accept","mode","body","JSON","stringify","then","result","catch","error","handleConfirmBlur","value","target","confirmDirty","compareToFirstPassword","rule","callback","getFieldValue","validateToNextPassword","validateFields","force","handleWebsiteChange","autoCompleteResult","map","domain","bind","getFieldDecorator","formItemLayout","labelCol","xs","span","sm","wrapperCol","tailFormItemLayout","offset","prefixSelector","initialValue","width","marginRight","rules","required","message","type","validator","Component","create"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"antd/dist/antd.css\";\nimport \"../index.css\";\nimport {\n  Form,\n  Input,\n  Tooltip,\n  Icon,\n  Cascader,\n  Select,\n  Row,\n  Col,\n  Checkbox,\n  Button,\n  AutoComplete,\n  Card\n} from \"antd\";\n\nconst { Option } = Select;\nconst AutoCompleteOption = AutoComplete.Option;\n\nclass RegistrationForm extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      confirmDirty: false,\n      autoCompleteResult: [],\n      name: \"\",\n      email: \"\",\n      phone: \"\",\n      password: \"\"\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleSubmit = e => {\n    const API_PATH = \"http://targeted.local.geekydev.com/index.php\";\n    e.preventDefault();\n    this.props.form.validateFieldsAndScroll((err, values) => {\n      if (!err) {\n        console.log(\"Values are \", values);\n        this.setState(\n          {\n            name: values.name,\n            phone: values.phone,\n            email: values.email,\n            password: values.password\n          },\n          () => {\n            console.log(\"Done with state and state is \", this.state);\n            fetch(API_PATH, {\n              method: \"POST\",\n              headers: {\n                Accept: \"application/json\",\n                \"Content-Type\": \"application/json\"\n              },\n\n              mode: \"no-cors\",\n              body: JSON.stringify({\n                name: this.state.name,\n                password: this.state.password,\n                email: this.state.email,\n                phone: this.state.phone\n              })\n            })\n              .then(result => {\n                console.log(result);\n              })\n              .catch(error => console.log(error));\n          }\n        );\n      }\n    });\n  };\n\n  handleConfirmBlur = e => {\n    const value = e.target.value;\n    this.setState({ confirmDirty: this.state.confirmDirty || !!value });\n  };\n\n  compareToFirstPassword = (rule, value, callback) => {\n    const form = this.props.form;\n    if (value && value !== form.getFieldValue(\"password\")) {\n      callback(\"Two passwords that you enter is inconsistent!\");\n    } else {\n      callback();\n    }\n  };\n\n  validateToNextPassword = (rule, value, callback) => {\n    const form = this.props.form;\n    if (value && this.state.confirmDirty) {\n      form.validateFields([\"confirm\"], { force: true });\n    }\n    callback();\n  };\n\n  handleWebsiteChange = value => {\n    let autoCompleteResult;\n    if (!value) {\n      autoCompleteResult = [];\n    } else {\n      autoCompleteResult = [\".com\", \".org\", \".net\"].map(\n        domain => `${value}${domain}`\n      );\n    }\n    this.setState({ autoCompleteResult });\n  };\n\n  render() {\n    const { getFieldDecorator } = this.props.form;\n    const { autoCompleteResult } = this.state;\n\n    const formItemLayout = {\n      labelCol: {\n        xs: { span: 24 },\n        sm: { span: 8 }\n      },\n      wrapperCol: {\n        xs: { span: 24 },\n        sm: { span: 16 }\n      }\n    };\n    const tailFormItemLayout = {\n      wrapperCol: {\n        xs: {\n          span: 24,\n          offset: 0\n        },\n        sm: {\n          span: 16,\n          offset: 8\n        }\n      }\n    };\n    const prefixSelector = getFieldDecorator(\"prefix\", {\n      initialValue: \"91\"\n    })(\n      <Select style={{ width: 70 }}>\n        <Option value=\"91\">+91</Option>\n      </Select>\n    );\n\n    return (\n      <Card>\n        <div className=\"observe\" style={{ marginRight: \"100px\" }}>\n          <Form {...formItemLayout} onSubmit={this.handleSubmit}>\n            <Form.Item label=\"Name\">\n              {getFieldDecorator(\"name\", {\n                rules: [\n                  {\n                    required: true,\n                    message: \"Please tell us your name!\"\n                  }\n                ]\n              })(<Input />)}\n            </Form.Item>\n            <Form.Item label=\"E-mail\">\n              {getFieldDecorator(\"email\", {\n                rules: [\n                  {\n                    type: \"email\",\n                    message: \"The input is not valid E-mail!\"\n                  },\n                  {\n                    required: true,\n                    message: \"Please input your E-mail!\"\n                  }\n                ]\n              })(<Input />)}\n            </Form.Item>\n            <Form.Item label=\"Password\">\n              {getFieldDecorator(\"password\", {\n                rules: [\n                  {\n                    required: true,\n                    message: \"Please input your password!\"\n                  },\n                  {\n                    validator: this.validateToNextPassword\n                  }\n                ]\n              })(<Input type=\"password\" />)}\n            </Form.Item>\n            <Form.Item label=\"Confirm Password\">\n              {getFieldDecorator(\"confirm\", {\n                rules: [\n                  {\n                    required: true,\n                    message: \"Please confirm your password!\"\n                  },\n                  {\n                    validator: this.compareToFirstPassword\n                  }\n                ]\n              })(<Input type=\"password\" onBlur={this.handleConfirmBlur} />)}\n            </Form.Item>\n\n            <Form.Item label=\"Phone Number\">\n              {getFieldDecorator(\"phone\", {\n                rules: [\n                  {\n                    required: true,\n                    message: \"Please input your phone number!\"\n                  }\n                ]\n              })(\n                <Input addonBefore={prefixSelector} style={{ width: \"100%\" }} />\n              )}\n            </Form.Item>\n            <Form.Item {...tailFormItemLayout}>\n              <Button type=\"primary\" htmlType=\"submit\">\n                Register\n              </Button>\n            </Form.Item>\n          </Form>\n        </div>\n      </Card>\n    );\n  }\n}\n\nexport default Form.create()(RegistrationForm);\n"]},"metadata":{},"sourceType":"module"}